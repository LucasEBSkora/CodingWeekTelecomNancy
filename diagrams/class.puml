@startuml "class"

skinparam linetype polyline
package model {
  class User {
    + int UID
    + String name
    + String password
    + String adress
    + String email
    + int florains
    + boolean sleepMode
    + Set<Integer> conversations
  }

  User o-- Ad

  Enum AdType {
    SERVICE
    GOOD
  }

  class Ad {
    + int ID
    + String name
    + boolean isOffer
    + String description
    + String imagePath
    + int cost
    + String adress
    + double maxDistance
    + Date start
    + Date end
    + Duration duration
  }
  Ad o--> AdType

  interface Database {
    + boolean isUsernameAvailable(String name)
    + int addUser(User user)
    + int addAd(Ad ad)
    + User getUser(int UID)
    + Ad getAd(int ID)
    + int authenticate(String username, String password)
    + ObservableList<Ad> getAdsAsList()
    + boolean isUsernameAvailable(String name)
    + String saveImage(String path)
    + int sendMessage(int from, int to, String text)
    + Conversation getConversation(int conversationID)
  }
  class JSONDatabase {
    - {static} JSONDatabase instance
    + {static} Database getInstance()
    - int getNewUserID()
    - int getNewAdID()
    - int getNewConversationID()
    - Path getPathToDbFile()
    - void save()
    - JSONDatabaseMemento toMemento()
    + String asJSON()
    - void load()
    - void loadFromJSON(String dbString)
    - void loadFromMemento(JSONDatabaseMemento m)
    - Path getPathToFile(String name)
    + String asJSON()
  }

  class Message {
    + int id
    + String text
    + boolean equals(Object other)
    + String toString()
  }

  class Conversation {
    + Set<Integer> userIds;
    + boolean userInConversation(int id)
    + List<Message> getMessages()
    + Set<Integer> getUserIds()
    + addMessage(int id, String message)
  }
  Conversation --> Message

  JSONDatabase --> IntSupplier
  JSONDatabase ..|> Database
  JSONDatabase --> User
  JSONDatabase --> Ad
  JSONDatabase --> Conversation
  interface IntSupplier {
    + int getAsInt()
  }

  JSONDatabaseMemento --> User
  JSONDatabaseMemento --> Ad
  JSONDatabaseMemento --> Conversation

  RandomIDSupplier ..|> IntSupplier

  JSONDatabase ..> MessageListDesserializer

  MessageListDesserializer ..|> JsonbDeserializer : "T = ObservableList<Message>"

  interface "JsonbDeserializer<T>" as JsonbDeserializer {
    + T deserialize(JsonParser parser, DeserializationContext ctx, Type rtType)
  }

}

@enduml